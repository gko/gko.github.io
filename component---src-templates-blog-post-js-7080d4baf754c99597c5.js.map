{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.js","webpack:///./src/components/Footer.js","webpack:///./src/components/Layout.js","webpack:///./src/components/Bio.js"],"names":["BlogPostTemplate","render","post","this","props","data","markdownRemark","_this$props$data$site","site","siteMetadata","siteUrl","siteTitle","title","_this$props$pageConte","pageContext","previous","next","slug","tweet","encodeURIComponent","_post$frontmatter","frontmatter","tags","date","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","location","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","description","excerpt","react_helmet__WEBPACK_IMPORTED_MODULE_6__","name","content","kebabCase","className","style","paddingLeft","map","tag","key","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","dangerouslySetInnerHTML","__html","html","href","align","src","alt","display","flexWrap","justifyContent","listStyle","padding","margin","fields","rel","React","Component","pageQuery","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","createContext","Consumer","staticQueryData","query","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","_data$site$siteMetada","author","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","property","concat","length","join","_public_static_d_1690466472_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","Footer","react_default","Date","getFullYear","Layout","header","_this$props","textAlign","gatsby_browser_entry","boxShadow","textDecoration","color","fontWeight","components_Footer","bioQuery","Bio","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","social","alignItems","flexDirection","marginTop","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","avatar","childImageSharp","borderRadius","twitter","github","_public_static_d_2377636077_json__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-templates-blog-post-js-7080d4baf754c99597c5.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/Bio'\nimport Layout from '../components/Layout'\nimport SEO from '../components/SEO'\nimport { Helmet } from 'react-helmet'\n\nimport kebabCase from 'lodash/kebabCase'\n\n//</Link>\nclass BlogPostTemplate extends React.Component {\n    render() {\n        const post = this.props.data.markdownRemark\n        const { siteUrl, title: siteTitle } = this.props.data.site.siteMetadata\n        const { previous, next, slug } = this.props.pageContext\n        const tweet = encodeURIComponent(`${siteUrl}${slug}`)\n        const { title, tags, date } = post.frontmatter\n\n        return (\n            <Layout location={this.props.location} title={siteTitle}>\n                <SEO title={title} description={post.excerpt} />\n                <Helmet title={title}>\n                    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                    <meta\n                        name=\"twitter:image\"\n                        content={`${siteUrl}/${kebabCase(title)}.png`}\n                    />\n                </Helmet>\n\n                <h1>{post.frontmatter.title}</h1>\n                {tags && (\n                    <ul\n                        className=\"tags\"\n                        style={{\n                            paddingLeft: 0,\n                        }}\n                    >\n                        {tags.map(tag => (\n                            <li key={tag} className=\"tag\">\n                                <Link to={`/tags/${kebabCase(tag)}/`}>\n                                    {tag}\n                                </Link>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                <p>{date}</p>\n                <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                <hr />\n\n                <p className=\"share\">\n                    <a\n                        className=\"twitter\"\n                        href={`https://twitter.com/intent/tweet?text=${tweet}`}\n                    >\n                        Tweet{' '}\n                        <img\n                            align=\"absmiddle\"\n                            src=\"/twitter-logo.svg\"\n                            alt=\"twitter logo\"\n                        />\n                    </a>\n                </p>\n\n                <ul\n                    className=\"navigation\"\n                    style={{\n                        display: `flex`,\n                        flexWrap: `wrap`,\n                        justifyContent: `space-between`,\n                        listStyle: `none`,\n                        padding: 0,\n                        margin: '2rem 0 0',\n                    }}\n                >\n                    <li>\n                        {previous && (\n                            <Link to={previous.fields.slug} rel=\"prev\">\n                                <span className=\"arrow\">←</span> {title}\n                            </Link>\n                        )}\n                    </li>\n                    <li>\n                        {next && (\n                            <Link to={next.fields.slug} rel=\"next\">\n                                {title} <span className=\"arrow\">→</span>\n                            </Link>\n                        )}\n                    </li>\n                </ul>\n            </Layout>\n        )\n    }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug($slug: String!) {\n        site {\n            siteMetadata {\n                title\n                author\n                siteUrl\n            }\n        }\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                tags\n                date(formatString: \"MMMM DD, YYYY\")\n            }\n            fields {\n                slug\n            }\n        }\n    }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n    return (\n        <StaticQuery\n            query={detailsQuery}\n            render={data => {\n                const metaDescription =\n                    description || data.site.siteMetadata.description\n\n                const {\n                    title: siteTitle,\n                    author,\n                    siteUrl,\n                } = data.site.siteMetadata\n\n                return (\n                    <Helmet\n                        htmlAttributes={{\n                            lang,\n                        }}\n                        title={title}\n                        titleTemplate={`${siteTitle}`}\n                        meta={[\n                            {\n                                name: `description`,\n                                content: metaDescription,\n                            },\n                            {\n                                property: `og:title`,\n                                content: title,\n                            },\n                            {\n                                property: `og:description`,\n                                content: metaDescription,\n                            },\n                            {\n                                property: `og:type`,\n                                content: `website`,\n                            },\n                            {\n                                name: `twitter:card`,\n                                content: `summary`,\n                            },\n                            {\n                                name: `twitter:creator`,\n                                content: author,\n                            },\n                            {\n                                name: `twitter:title`,\n                                content: title,\n                            },\n                            {\n                                name: `twitter:description`,\n                                content: metaDescription,\n                            },\n                        ]\n                            .concat(\n                                keywords.length > 0\n                                    ? {\n                                          name: `keywords`,\n                                          content: keywords.join(`, `),\n                                      }\n                                    : []\n                            )\n                            .concat(meta)}\n                    />\n                )\n            }}\n        />\n    )\n}\n\nSEO.defaultProps = {\n    lang: `en`,\n    meta: [],\n    keywords: [],\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n    query DefaultSEOQuery {\n        site {\n            siteMetadata {\n                title\n                description\n                author\n                siteUrl\n            }\n        }\n    }\n`\n","import React from 'react'\n\nconst Footer = () => (<footer>\n\t© {(new Date()).getFullYear()},&nbsp;<a href=\"mailto:hi@konstantin.io?subject=hello\">Konstantin</a>\n</footer>)\n\nexport default Footer;\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Footer from '../components/Footer';\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location && location.pathname === rootPath) {\n      header = (\n        <h1\n          style={{\n            textAlign: 'center'\n          }}\n        >\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n            }}\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h1>\n      )\n    } else {\n      header = (\n        <h3 className=\"backLink\">\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n              fontWeight: 300\n            }}\n            to={`/`}\n          >\n            <span className=\"arrow\">←</span> {title}\n          </Link>\n        </h3>\n      )\n    }\n\n    return (\n      <div>\n        {header}\n        {children}\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author, social } = data.site.siteMetadata\n        return (\n          <div\n            style={{\n              display: `flex`,\n              justifyContent: 'center',\n              alignItems: 'center',\n              flexDirection: 'column',\n              marginTop: '1em',\n            }}\n            className=\"bio\"\n          >\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                borderRadius: `15%`,\n              }}\n            />\n            <p className=\"social\">\n              <a href={`https://twitter.com/${social.twitter}`}>twitter</a>{' '}\n              &bull;&nbsp;\n              <a href={`https://github.com/${social.github}`}>github</a>{' '}\n              &bull;&nbsp;\n              {/*<a href={`https://fr.linkedin.com/in/${social.linkedin}`}>linkedin</a> &bull;&nbsp;*/}\n              <a href=\"/cv\">CV</a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 180, height: 180) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          twitter\n          github\n          linkedin\n        }\n      }\n    }\n  }\n`\n\nexport default Bio\n"],"sourceRoot":""}