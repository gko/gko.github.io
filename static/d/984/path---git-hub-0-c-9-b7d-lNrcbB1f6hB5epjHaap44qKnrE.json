{"data":{"site":{"siteMetadata":{"title":"Konstantin","author":"Konstantin","siteUrl":"https://konstantin.io","repository":"https://github.com/gko/gko.github.io"}},"markdownRemark":{"id":"44129238-37e3-5d35-a489-0fc7a5d9d3ae","excerpt":"I find that the most annoying part of working with GitHub is the necessity to switch back and forth between terminal and web interface to either copy a repo…","html":"<p>I find that the most annoying part of working with GitHub is the necessity to switch back and forth between terminal and web interface to either copy a repo name, to see pull requests/issues or to fork stuff. Wouldn’t it be much easier if I could just write something like <code class=\"language-text\">git repos</code> and get the list, so that I can just clone it right away.</p>\n<h2>Enter «Hub»</h2>\n<p>If you’ve been working with github for some time you probably know or use the <a href=\"https://github.com/github/hub\">hub</a> project from GitHub. Well, <a href=\"https://github.com/github/hub/releases/tag/v2.8.3\">recently</a> they added something that might change the way you work with GitHub: <a href=\"https://hub.github.com/hub-api.1.html\">hub api command</a> that allows you to use any of GitHub API and make <a href=\"https://developer.github.com/v4/\">graphql queries</a>.</p>\n<h2>Let’s make some aliases</h2>\n<p>You can find a bit more information on git aliases in my <a href=\"/git-alias/\">previous\npost</a>.</p>\n<p>Generally, after you’ve installed <code class=\"language-text\">hub</code> you will alias it to git, so that it wraps all basic functions while adding its own(run <code class=\"language-text\">hub alias</code> for settings in your shell). Now, let’s take a look at problems above.</p>\n<h3>Git repos</h3>\n<p>First we want to get list of user’s github repositories. I found an elegant solution to list a random user repos in one of <a href=\"https://github.com/github/hub/issues/1419#issuecomment-473861104\">hubs issues</a>. All we need is to add a function that will tell us a logged in user. To do that we need to add following alias into <code class=\"language-text\">~/.gitconfig</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[alias]\n  user = &quot;!f() { hub api --flat user | grep .login | awk &#39;/.login/ {print $2}&#39;; }; f&quot;</code></pre></div>\n<p>now we need to break down the script we found into several aliases:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[alias]\n  # this function allows you to go through hub low level api with or without multiple pages\n  paginate = &quot;!paginate() { local output cursor; output=\\&quot;$(\\&quot;$@\\&quot;)\\&quot;; cursor=\\&quot;$(awk &#39;/\\\\.hasNextPage/ { has_next=$2 } /\\\\.endCursor/ { if (has_next==\\&quot;true\\&quot;) print $2 }&#39; &lt;&lt;&lt;\\&quot;$output\\&quot;)\\&quot;; printf \\&quot;%s\\\\n\\&quot; \\&quot;$output\\&quot;; [ -z \\&quot;$cursor\\&quot; ] || paginate \\&quot;$@\\&quot; -f after=\\&quot;$cursor\\&quot;; }; paginate &quot;\n\n  repos = &quot;!repos() { local user=\\&quot;${1?}\\&quot;;shift 1; git paginate hub api -t graphql -f user=\\&quot;$user\\&quot; \\&quot;$@\\&quot; \\\n  -f query=&#39;query($user: String!, $per_page: Int = 100, $after: String) { user(login: $user) { \\\n  repositories(first: $per_page, after: $after) { nodes { nameWithOwner }, pageInfo { hasNextPage, endCursor } } } }&#39;;}; \\\n  repos \\&quot;$(git user)\\&quot; | awk &#39;/\\\\.nameWithOwner\\\\t/ { print $2 }&#39;;&quot;</code></pre></div>\n<p>as a result you can just type <code class=\"language-text\">git repos</code> and it will list all your GitHub repos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gko/dotfiles\ngko/vimio\ngko/concat\n...</code></pre></div>\n<h3>Git comment</h3>\n<p>Hub allows you to view, create or close any repo’s issue from terminal using <a href=\"https://hub.github.com/hub-issue.1.html\">hub issue</a> command. But there is no default way to post a comment from the terminal. But using <code class=\"language-text\">hub api</code> we can do just that:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[alias]\n  comment = &quot;!f() { hub api \\&quot;repos/{owner}/{repo}/issues/$1/comments\\&quot; --raw-field \\&quot;body=$2\\&quot;; }; f&quot;</code></pre></div>\n<p>now we can just type <code class=\"language-text\">git comment &lt;ISSUE NUMBER&gt; &quot;Some comment&quot;</code> and it will be posted for us.</p>\n<h3>Hub browse</h3>\n<p>Another amazing hub feature is <a href=\"https://hub.github.com/hub-browse.1.html\"><code class=\"language-text\">hub browse</code></a> that allows you to view a project main page, or any subpage(i.e. «/issues») as following:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[alias]\n  issues = browse -- issues\n  wiki = browse -- wiki</code></pre></div>\n<h2>More stuff</h2>\n<p>You can see the examples above and some other cool stuff in the <a href=\"https://github.com/gko/dotfiles/blob/master/.gitconfig\">gitconfig file</a> from my <a href=\"https://github.com/gko/dotfiles\">dotfiles repo</a>.</p>","frontmatter":{"title":"Making your life easier with «Hub» from GitHub","tags":["github","hub","git","alias"],"date":"2019-04-07T00:00:00.000Z","cover_image":"https://thepracticaldev.s3.amazonaws.com/i/hx7ercygzce8mop537pt.png"},"fields":{"slug":"/git-hub/"}}},"pageContext":{"slug":"/git-hub/","previous":{"fields":{"slug":"/git-alias/"},"frontmatter":{"title":"Aliases git way","tags":["git","alias","gitconfig","shell"],"published":true,"slug":null,"cover_image":"https://thepracticaldev.s3.amazonaws.com/i/hk8d7hycjb9epklumqf1.png"},"fileAbsolutePath":"/builds/gko/gko-github-io/src/posts/git-alias.md"},"next":null,"filename":"git-hub.md"}}